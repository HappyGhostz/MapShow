apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.zcp.mapshow"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        manifestPlaceholders = [
                BAIDU_KEY: "dhNx7Pma6a9xS1Pwc2CBYZas7tSLvRjp",
                IM_KEY: "1193180428253558#mapshow"
        ]
        ndk {
            abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86','armeabi'
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    signingConfigs {
        debug {
//            storeFile file("../keystore/debug/debug.keystore")
//            storePassword "android"
//            keyAlias "androiddebugkey"
//            keyPassword "android"
        }
        release {
//            storeFile file("../keystore/release/WMSKey")
//            storePassword "Romens@WMS@##"
//            keyAlias "ROMENS_WMS_KEY"
//            keyPassword "Romens#WMS#@@"
        }
    }
    buildTypes {
        debug {
            buildConfigField "boolean", "ENABLE_DEVELOP_MODE", "true"
            shrinkResources false
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
        release {
            buildConfigField "boolean", "ENABLE_DEVELOP_MODE", "false"
            minifyEnabled false//是否混淆
            // 移除无用的resource文件
            shrinkResources false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'//引用的混淆文件

//            applicationVariants.all { variant ->
//                variant.outputs.each { output ->
//                    def file = output.outputFile
//                    if (file != null && file.name.endsWith('.apk')) {
//                        //def fileName = file.name.replace(".apk", "-v" + versionName + "-c" + versionCode +"_t"+releaseTime()+".apk")
//                        def fileName = file.name.replace(".apk", "_v${defaultConfig.versionName}_c${defaultConfig.versionCode}.apk")
//                        output.outputFile = new File(file.parentFile, fileName)
//                    }
//                }
//            }
        }
    }

    lintOptions {
        abortOnError false
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }
    dataBinding {
        enabled = true
    }
    //use legacy for android 6.0
    useLibrary 'org.apache.http.legacy'
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}
configurations {
    all*.exclude group: 'android.support.v4', module: 'support-v4'
    all*.exclude group: 'android.support.v7', module: 'support-v7'
}
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:multidex:1.0.3'
    def system_dependencies = rootProject.ext.system_dependencies
    implementation system_dependencies.support_v4
    implementation system_dependencies.recyclerview_v7
    implementation system_dependencies.appcompat_v7
    implementation system_dependencies.cardview_v7
    implementation system_dependencies.palette_v7
    implementation system_dependencies.design
    implementation system_dependencies.kotlin
    implementation system_dependencies.support_annotations
    implementation system_dependencies.system_constraint
    testImplementation system_dependencies.test_junit
    androidTestImplementation system_dependencies.android_test_runner
    androidTestImplementation system_dependencies.android_test_espresso
    //baidu map sdk
    implementation files('libs/IndoorscapeAlbumPlugin.jar')
    implementation files('libs/httpmime-4.1.2.jar')
    implementation files('libs/BaiduLBS_Android.jar')
    def im_dependencies = rootProject.ext.im_dependencies

    def funiction_dependencies = rootProject.ext.function_dependencies
    implementation funiction_dependencies.okhttp
//    implementation funiction_dependencies.rxjava2
    implementation funiction_dependencies.rxandroid
    implementation 'io.reactivex.rxjava2:rxjava:2.2.3'
    implementation funiction_dependencies.retrofit
    implementation funiction_dependencies.retrofit_gson
    implementation funiction_dependencies.retrofit2_rxadapter
    implementation funiction_dependencies.rxlifecycle
    implementation funiction_dependencies.rvAdapter_helper
    implementation funiction_dependencies.fresco
    implementation funiction_dependencies.fresco_gif
    implementation funiction_dependencies.fresco_webp_animated
    implementation funiction_dependencies.fresco_webp_static
    def anko_dependencies = rootProject.ext.anko_dependencies
    implementation anko_dependencies.anko
    implementation files('libs/hyphenatechat_3.4.0.1.jar')

    implementation 'com.google.firebase:firebase-core:16.0.5'
    implementation 'com.google.firebase:firebase-iid:17.0.4'
    implementation 'com.google.firebase:firebase-messaging:17.3.4'
    implementation 'com.firebase:firebase-jobdispatcher:0.8.5'

    def quickbox = rootProject.ext.quickbox
    implementation quickbox.quick_chat
    implementation quickbox.quick_rtc
    implementation(project(":sample-core"))
}
apply plugin: 'com.google.gms.google-services'